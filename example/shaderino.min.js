const vs="\n  attribute vec4 a_position;\n\n  void main() { \n    gl_Position = a_position;\n  } \n";function createShader(e,r,t){let a=e.createShader(r);if(e.shaderSource(a,t),e.compileShader(a),e.getShaderParameter(a,e.COMPILE_STATUS))return a;console.log(e.getShaderInfoLog(a)),e.deleteShader(a)}function createProgram(e,r,t){let a=e.createProgram();if(e.attachShader(a,r),e.attachShader(a,t),e.linkProgram(a),e.getProgramParameter(a,e.LINK_STATUS))return a;console.log(e.getProgramInfoLog(a)),e.deleteProgram(a)}function shaderino(e,r){let t=canvas.getContext("webgl");if(!t)return void console.error("No webgl support");let a=createShader(t,t.VERTEX_SHADER,vs),o=createShader(t,t.FRAGMENT_SHADER,`\n        precision highp float; \n        uniform vec2 u_resolution; \n        uniform float u_time;\n\n        ${r}\n    `),n=createProgram(t,a,o),i=t.getAttribLocation(n,"a_position"),c=t.getUniformLocation(n,"u_resolution"),l=t.getUniformLocation(n,"u_time"),f=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,f);function u(){t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT),t.useProgram(n),t.enableVertexAttribArray(i),t.bindBuffer(t.ARRAY_BUFFER,f),t.uniform2f(c,t.canvas.width,t.canvas.height);let e=t.FLOAT,r=0;t.vertexAttribPointer(i,2,e,!1,0,r);let a=t.TRIANGLES;r=0,t.drawArrays(a,r,3)}t.bufferData(t.ARRAY_BUFFER,new Float32Array([-2,2,3,1,-1,-3]),t.STATIC_DRAW);let g,s=0;let m=!1;return{stop(){m=!1,cancelAnimationFrame(g)},draw(){m=!0,u(),function e(){m&&(s+=.01,t.uniform1f(l,s),u(),g=requestAnimationFrame(function(){e()}))}()}}}