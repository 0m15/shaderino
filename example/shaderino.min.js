const VERTEX_SHADER="\n  attribute vec4 a_position;\n\n  void main() { \n    gl_Position = a_position;\n  }\n";function createShader(e,r,t){let a=e.createShader(r);if(e.shaderSource(a,t),e.compileShader(a),e.getShaderParameter(a,e.COMPILE_STATUS))return a;console.log(e.getShaderInfoLog(a)),e.deleteShader(a)}function createProgram(e,r,t){let a=e.createProgram();if(e.attachShader(a,r),e.attachShader(a,t),e.linkProgram(a),e.getProgramParameter(a,e.LINK_STATUS))return a;console.log(e.getProgramInfoLog(a)),e.deleteProgram(a)}function tex2D(e,r,t=0){let a=e.createTexture();return e.bindTexture(e.TEXTURE_2D,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,t,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r)}function setupProgram(e,r){return createProgram(e,createShader(e,e.VERTEX_SHADER,VERTEX_SHADER),createShader(e,e.FRAGMENT_SHADER,`\n        precision highp float;\n        uniform vec2 u_resolution;\n        uniform float u_time;\n\n        ${r}\n    `))}function setupUniforms(e,r,t){return t.reduce((t,a)=>({...t,[a.name]:uniform(e,r,a.type,a.name,a.update)}),{})}function uniform(e,r,t,a,n){let o,i=e.getUniformLocation(r,a);return{update:n,get:()=>o,set(r){switch(o=r,t){case"f":return e.uniform1f(i,r);case"vec2":case"vec3":return e.uniform2f(i,...r);case"tex2D":console.log("texture2d uniform type not supported yet!")}}}}function shaderino(e,r,t=[]){let a,n=canvas.getContext("webgl"),o=0,i=!1;if(!n)return void console.error("No webgl support");let u=setupProgram(n,r),c=n.getAttribLocation(u,"a_position"),E=uniform(n,u,"vec2","u_resolution"),T=uniform(n,u,"f","u_time"),s=setupUniforms(n,u,t),f=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,f);function m(){n.viewport(0,0,n.canvas.width,n.canvas.height),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.useProgram(u),n.enableVertexAttribArray(c),n.bindBuffer(n.ARRAY_BUFFER,f),E.set([n.canvas.width,n.canvas.height]),n.vertexAttribPointer(c,2,n.FLOAT,!1,0,0),n.drawArrays(n.TRIANGLES,0,3)}return n.bufferData(n.ARRAY_BUFFER,new Float32Array([-2,2,3,1,-1,-3]),n.STATIC_DRAW),{stop(){i=!1,cancelAnimationFrame(a)},start(){i=!0,m(),function e(){i&&(T.set(o),o+=.01,Object.keys(s).forEach(e=>{s[e].set(s[e].update())}),m(),a=requestAnimationFrame(()=>e()))}()}}}